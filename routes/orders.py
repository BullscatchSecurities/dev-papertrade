from fastapi import APIRouter, Depends, HTTPException, status, Response
from utils.database import get_db   
from requests import Session
from models.orders import OrderRequest
router = APIRouter()

@router.post(
    "/variety/:variety",
    summary="Place an order of a particular variety",
    description="This endpoint Place an order of a particular variety. "
)
def post_orders( db: Session = Depends(get_db)):
    
    try:
        
        return {"status": "success", "message": "Order success"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    
@router.put(
    "/variety/:variety/:order_id",
    summary="modify an open or pending order",
    description="This endpoint modify an open or pending order"
)
def modify_order( db: Session = Depends(get_db)):
    
    
    try:
        
        return {"status": "success", "message": "Order success"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))    
    

@router.delete(
    "/variety/:variety/:order_id",
    summary="modify an open or pending order",
    description="This endpoint modify an open or pending order"
)
def delete_order( db: Session = Depends(get_db)):
    
    
    try:
        
        return {"status": "success", "message": "Order success"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))   

@router.get(
    "/",
    summary="Retrieve the list of all orders (open and executed) for the day",
    description="This endpoint retrieve the list of all orders (open and executed) for the day"
)
def get_orders( db: Session = Depends(get_db)):
    
    
    try:
        
        return {"status": "success", "message": "Order success"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))       

@router.get(
    "/get/:order_id",
    summary="Retrieve the list of all orders (open and executed) for the day",
    description="This endpoint retrieve the list of all orders (open and executed) for the day."
)
def get_Particular_order( db: Session = Depends(get_db)):
    
    
    try:
        
        return {"status": "success", "message": "Order success"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))      
    
@router.get(
    "/trades",
    summary="Retrieve the list of all executed trades for the day",
    description="This endpoint retrieve the list of all executed trades for the day "
)
def get_all_trades( db: Session = Depends(get_db)):
    
    
    try:
        
        return {"status": "success", "message": "Order success"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))   

@router.get(
    "/:order_id/trades",
    summary="Retrieve the trades generated by an order",
    description="This endpoint retrieve the trades generated by an order"
)
def get_specific_trades( db: Session = Depends(get_db)):
    
    
    try:
        
        return {"status": "success", "message": "Order success"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))           